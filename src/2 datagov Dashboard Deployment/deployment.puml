@startuml
!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Deployment.puml

LAYOUT_WITH_LEGEND()
title data.gov Dashboard Deployment

Person(team, "data.gov team\nmember", "Code Writer")
Person(approver, "data.gov team\nmember", "Code Reviewer")

Deployment_Node(aws, "AWS GovCloud", "Amazon Web Services Region") {
    Deployment_Node(cloudgov, "cloud.gov", "Cloud Foundry PaaS") {
        Boundary(atob, "ATO boundary") {
            Deployment_Node(organization, "data.gov organization") {
                Deployment_Node(production, "production space") {
                    System_Boundary(dashboard, "data.gov dashboard") {
                        Container(dashboard_app, "Web Application x2", "PHP, CodeIgniter", "Delivers static HTML/CSS and forms")
                        ContainerDb(dashboard_db, "PostgreSQL Database", "AWS RDS", "Stores agency information and reports")
                        ContainerDb(dashboard_s3, "Blob Store", "AWS S3", "Caches crawled data.json and digitalstrategy.json files")
                    }
                }
                Deployment_Node(staging, "staging space") {
                    System_Boundary(dashboard_staging, "data.gov dashboard") {
                        Container(dashboard_app_staging, "Web Application x2", "PHP, CodeIgniter", "Delivers static HTML/CSS and forms")
                        ContainerDb(dashboard_db_staging, "PostgreSQL Database", "AWS RDS", "Stores agency information and reports")
                        ContainerDb(dashboard_s3_staging, "Blob Store", "AWS S3", "Caches crawled data.json and digitalstrategy.json files")
                    }
                }
                Deployment_Node(management, "management space") {
                    Container(backup_app, "Backup app", "Python", "Makes and restores DB backups across spaces")
                    ContainerDb(backup_s3, "Blob Store", "AWS S3", "Stores backups")
                }
            }
        }
    }
}

Rel(backup_app, backup_s3, "reads/writes DB dumps", "https (443)")
Rel(backup_app, dashboard_db, "dumps", "postgres (5432)")
Rel(backup_app, dashboard_db_staging, "restores", "postgres (5432)")


Person_Ext(public, "Dashboard viewer", "A member of the public or agency personnel")
Deployment_Node(computer, "Computing Device", "MS Windows, OS X, or Linux"){
    System_Ext(browser, "Web Browser", "any modern version")
}

System_Ext(agencysites, "Agency websites", "Main website for the monitored agencies")
System_Ext(circleci, "CircleCI", "CI/CD SaaS")
System_Ext(github, "GitHub", "VCS SaaS")


Rel(team, github, "1) commits code to branch and makes pull-request")
Rel(github, circleci, "2) notifies of changes", "GitHub API")
Rel(circleci, circleci, "3) runs unit/integration tests on branch")
Rel_Back(github, circleci, "4) reports test results", "GitHub API")
Rel_Back(approver, github, "5) requests review")
Rel(approver, github, "6) approves and merges PR to master")
Rel(circleci, dashboard_app_staging, "7) pushes code to staging space", "Cloud Foundry API")
Rel(circleci, circleci, "8) runs smoke tests on staging")
Rel(circleci, dashboard_app, "9) pushes code to production space", "Cloud Foundry API")
Rel(circleci, dashboard_app, "10) periodically triggers crawls", "Cloud Foundry API")

Rel(dashboard_app, agencysites, "crawls data.json and digitalstrategy.json files", "https GET/HEAD (443)") 
Rel(dashboard_app, dashboard_db, "reads agency info, reads/writes reports, ", "postgres (5432)")
Rel(dashboard_app, dashboard_s3, "stores crawled files", "https GET/POST(443)")
Rel(dashboard_app_staging, dashboard_db_staging, "reads agency info, reads/writes reports, ", "postgres (5432)")
Rel(dashboard_app_staging, dashboard_s3_staging, "stores crawled files", "https GET/POST(443)")

Rel(public, browser, "uses")
Rel(browser, dashboard, "views static content, uploads data.json", "https GET/POST (443)")

@enduml
