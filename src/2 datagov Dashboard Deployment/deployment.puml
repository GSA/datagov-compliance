@startuml
!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Deployment.puml

LAYOUT_WITH_LEGEND()
title data.gov Dashboard Deployment
skinparam linetype polyline

Person(team, "data.gov team\nmember", "Code Writer")

Deployment_Node(aws, "AWS GovCloud", "Amazon Web Services Region") {
    Deployment_Node(cloudgov, "cloud.gov", "Cloud Foundry PaaS") {
        System_Ext(cloudgov_router, "cloud.gov router", "Cloud Foundry service")
        System_Ext(cloudgov_uaa, "cloud.gov authentication", "Cloud Foundry service")
        System_Ext(cloudgov_controller, "cloud.gov controller", "Cloud Foundry orchestration")
        System_Ext(cloudgov_dashboard, "cloud.gov dashboard", "Cloud Foundry web UI")
        System_Ext(cloudgov_logdrain, "logs.fr.cloud.gov", "ELK")
        Boundary(atob, "ATO boundary") {
            Deployment_Node(organization, "data.gov organization") {
                Deployment_Node(production, "production space") {
                    System_Boundary(dashboard, "data.gov dashboard") {
                        Container(dashboard_app, "Dashboard Application", "PHP, CodeIgniter", "Delivers static HTML/CSS and forms")
                        ContainerDb(dashboard_db, "Production PostgreSQL Database", "AWS RDS", "Stores agency information and reports")
                        ContainerDb(dashboard_s3, "Production Blob Store", "AWS S3", "Caches crawled data.json and digitalstrategy.json files")
                    }
                }
                Deployment_Node(staging, "staging space") {
                    System_Boundary(dashboard_staging, "data.gov dashboard") {
                        Container(dashboard_app_staging, "Dashboard Application", "PHP, CodeIgniter", "Delivers static HTML/CSS and forms")
                        ContainerDb(dashboard_db_staging, "Staging PostgreSQL Database", "AWS RDS", "Stores agency information and reports")
                        ContainerDb(dashboard_s3_staging, "Staging Blob Store", "AWS S3", "Caches crawled data.json and digitalstrategy.json files")
                    }
                }
                Deployment_Node(management, "management space") {
                    Container(backup_app, "Backup app", "Python", "Makes and restores DB backups across spaces")
                    ContainerDb(backup_s3, "Blob Store", "AWS S3", "Stores backups")
                }
            }
        }
    }
}

' Backups flow
Rel(backup_app, backup_s3, "reads/writes DB dumps", "https (443)")
Rel(backup_app, dashboard_db, "dumps", "postgres (5432)")
Rel(backup_app, dashboard_db_staging, "restores", "postgres (5432)")

' Logs flow
Rel(staging, cloudgov_logdrain, "logs to", "stdout/stderr")
Rel(production, cloudgov_logdrain, "logs to", "stdout/stderr")
Rel(management, cloudgov_logdrain, "logs to", "stdout/stderr")
Rel(team, cloudgov_logdrain, "reviews logs", "https (443)")

Rel(team, cloudgov_uaa, "authenticates with", "https (443)")
Rel(team, cloudgov_dashboard, "inspects", "https (443)")
Rel(cloudgov_dashboard, cloudgov_controller, "inspects and manipulates state", "https (443)")

' Customer access
Person_Ext(public, "Dashboard viewer", "A member of the public or agency personnel")
Deployment_Node(computer, "Computing Device", "MS Windows, OS X, or Linux"){
    System_Ext(browser, "Web Browser", "any modern version")
}
Deployment_Node(gsuite, "GSA G Suite", "Collaboration SaaS") {
	System(ggroup, "datagovhelp@gsa.gov", "Google Group")
}
System_Ext(agencysites, "Agency websites", "Main website for the monitored agencies")

Rel(public, ggroup, "gets help from")
Rel(team, ggroup, "answers question from")

' Monitoring
System_Ext(newrelic, "New Relic", "Monitoring SaaS")

' Deployment
Boundary(deploymentservices, "Deployment services") {
    System_Ext(circleci, "CircleCI", "CI/CD SaaS")
    System_Ext(snyk, "Snyk", "Dependency analysis SaaS")
    Deployment_Node(github, "GitHub", "VCS SaaS"){
        System(github_repo, "GSA/project-open-data-dashboard", "Code repository")
    }
}
Rel_Back(team, newrelic, "reports problems", "email")
Rel(team, github_repo, "commits code, makes pull-request, approves PRs", "https (443)")
Rel(circleci, github_repo, "watches for changes, reports test results", "GitHub API")
Rel(snyk, github_repo, "watches for changes, reports vulnerable depencies", "GitHub API")
Rel(circleci, cloudgov_controller, "pushes code, invokes tasks", "https (443)")
Rel(circleci, cloudgov_router, "runs smoke tests on URLs", "https (443)")
Rel(cloudgov_controller, staging, "provisions/operates apps and services")
Rel(cloudgov_controller, production, "provisions/operates apps and services")
Rel(cloudgov_controller, management, "provisions/operates apps and services")

Rel(dashboard_app, agencysites, "crawls data.json and digitalstrategy.json files", "https GET/HEAD (443)") 
Rel(dashboard_app, dashboard_db, "reads agency info, reads/writes reports, ", "postgres (5432)")
Rel(dashboard_app, dashboard_s3, "stores crawled files", "https GET/POST(443)")
Rel(dashboard_app_staging, dashboard_db_staging, "reads agency info, reads/writes reports, ", "postgres (5432)")
Rel(dashboard_app_staging, dashboard_s3_staging, "stores crawled files", "https GET/POST(443)")

Rel(public, browser, "uses")
System_Ext(googleanalytics, "Google Analytics", "Web analytics SaaS")
Rel(browser, googleanalytics, "reports usage to")
Rel(browser, cloudgov_router, "views static content, uploads data.json", "https GET/POST (443)")
Rel(cloudgov_router, dashboard_app, "proxies to", "https GET/POST (443)")
Rel(cloudgov_router, dashboard_app_staging, "proxies to", "https GET/POST (443)")
Rel(newrelic, dashboard_app, "monitors", "https GET (443)")

@enduml